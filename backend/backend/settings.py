"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import logging
import os
import re
import sys
from datetime import timedelta
from functools import partial
from itertools import product
from pathlib import Path

import IPython

# https://stackoverflow.com/questions/63049908/using-ipython-with-breakpoint
# https://stackoverflow.com/questions/53933400/ipython-embed-does-not-use-terminal-colors
#
# ipython breakpoint
sys.breakpointhook = partial(IPython.embed, display_banner=False, colors="neutral")

# from decouple import config, Csv

APP_NAME = "backend"
BASE_DIR = Path(__file__).resolve().parent.parent

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "ninja",
    "ninja_jwt",
    "ninja_extra",
    # "api.apps.ApiConfig",
    "core.apps.CoreConfig",
    "user.apps.UserConfig",
    "category.apps.CategoryConfig",
    "card.apps.CardConfig",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            # REACT_BUILD_DIR
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# STATIC_URL = "/static/"
# MEDIA_URL = "/media/"
STATIC_URL = "/django_static/"
STATIC_ROOT = BASE_DIR / "django_static"
STATICFILES_DIRS: list[Path] = [
    # BASE_DIR / "static",
]

CSRF_COOKIE_SAMESITE = "Strict"
SESSION_COOKIE_SAMESITE = "Strict"
CSRF_COOKIE_HTTPONLY = False  # False since we will grab it via universal-cookies
SESSION_COOKIE_HTTPONLY = True

# PROD ONLY
# CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_SECURE = True

# Should be a switch for various settings
DEBUG = bool(int(os.environ.get("DJANGO_DEBUG", 1)))
SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]

# 'DJANGO_ALLOWED_HOSTS' should be a single string of hosts with a space between each.
# ALLOWED_HOSTS = re.split(
#     r"\s+", "http://localhost:8000 http://localhost:3000 http://127.0.0.1" if DEBUG else os.environ["ALLOWED_HOSTS"]
# )
# CSRF_TRUSTED_ORIGINS = [f"http://{h}" for h in ALLOWED_HOSTS]
# CORS_ALLOWED_ORIGINS = [f"http://{h}" for h in ALLOWED_HOSTS]

host_string = (
    "localhost 127.0.0.1 [::1]" if DEBUG else os.environ["DJANGO_ALLOWED_HOSTS"]
)
hosts = re.split(r"\s+", host_string)
ports = ["", ":8000", ":3000"] if DEBUG else [""]
protocol = "http://" if DEBUG else "https://"

full_hosts: list[str] = [
    f"{protocol}{host}{port}" for host, port in product(hosts, ports)
]

ALLOWED_HOSTS = hosts
CSRF_TRUSTED_ORIGINS = full_hosts
CORS_ALLOWED_ORIGINS = full_hosts

USE_SQLITE = bool(int(os.environ.get("DJANGO_USE_SQLITE", 1)))

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": "debug_db.sqlite3",
    }
    if USE_SQLITE
    else {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ["DJANGO_DB_NAME"],
        "USER": os.environ["DJANGO_DB_USER"],
        "PASSWORD": os.environ["DJANGO_DB_PASSWORD"],
        "HOST": os.environ["DJANGO_DB_HOST"],
        "PORT": os.environ["DJANGO_DB_PORT"],
    }
}

AUTH_USER_MODEL = "user.AuthUser"
ATOMIC_REQUESTS = False

# nplusone

NPLUSONE_LOGGER = logging.getLogger("nplusone")
NPLUSONE_LOG_LEVEL = logging.WARNING
NPLUSONE_RAISE = False


# Logging

LOGGING = {
    "version": 1,
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
    },
    "loggers": {
        "nplusone": {
            "handlers": ["console"],
            "level": "WARN",
        },
        "debug": {
            "handlers": ["console"],
            "level": "DEBUG",
        },
    },
}

NINJA_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=60),
}

if DEBUG:
    MIDDLEWARE.extend(
        [
            "core.middleware.metric_middleware",
            "nplusone.ext.django.NPlusOneMiddleware",
        ]
    )
    INSTALLED_APPS.append("nplusone.ext.django")

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
